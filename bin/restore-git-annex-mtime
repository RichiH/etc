#! /usr/bin/env python
'''restore mtimes on files stored in git-annex

git-annex, when using the WORM backend, stores mtimes of files, but
does not restore these mtimes.  For some uses, this can be
inconvenient, especially if the mtime represents useful chronological
data.  This program uses the information stored by the WORM backend to
restore the mtimes of git-annex files and symlinks.

http://git-annex.branchable.com/bugs/softlink_mtime/

This program is suitable for running as a post-checkout hook, with a file like the following:

--8<-------

#! /bin/bash
/home/ethan/etc/bin/restore-git-annex-mtime

--8<-------

Note that post-checkout hooks are not copied by default when you clone a repository, so you'll need to put this in every repository you work with.
'''

import os.path
import sys
import re
import ctypes

WORM_RE = re.compile("\\.git/annex/objects/(.+)/WORM-s(\\d+)-m(\\d+)-.+")
def get_real_mtime(fname):
    target = os.readlink(fname)
    match = WORM_RE.match(target)
    if not match:
        return None

    return int(match.group(3))

def walk_dirtree(root):
    for root, dirs, files in os.walk(root):
        #print root, dirs, files
        for item in dirs[:]:
            if item.startswith('.'):
                dirs.remove(item)

        for item in files:
            fname = os.path.join(root, item)
            if os.path.islink(fname):
                realtime = get_real_mtime(fname)
                #print fname, os.path.getmtime(fname), get_real_mtime(fname)
                #os.utime(fname, (realtime, realtime))
                set_link_mtime(fname, realtime)

# This is super non-portable; patches welcome
class c_timespec(ctypes.Structure):
    _fields_ = [('tv_sec', ctypes.c_long),   # FIXME: time_t; will break on 64-bit?
                ('tv_nsec', ctypes.c_long)]

libc = ctypes.cdll.LoadLibrary("libc.so.6")
lutimes = libc.lutimes
c_two_timespecs = c_timespec*2
lutimes.argtypes = [ctypes.c_char_p, c_two_timespecs]
def _set_link_mtime(fname, mtime):
    '''lutime version.  lutime is provided by glibc and so this ought
    to work on Linux and BSD (so hopefully OS X?).  Obviously Windows
    is way out of the question.'''
    # WORM just stores mtime to second precision, so ns = 0
    mtimespec = c_timespec(mtime, 0)
    libc.lutimes(fname, c_two_timespecs(mtimespec, mtimespec))


def set_link_mtime(fname, mtime):
    _set_link_mtime(fname, mtime)
    # Sanity check to make sure that mtime was correctly updated.
    # If this assertion fails for you, maybe something in the type
    # declaration above doesn't work.  I don't envy you, but patches welcome.
    assert os.lstat(fname).st_mtime == mtime

    # Update the time on the pointed-to file too, why not?
    # N.B.  This might fail because the file is kept in a directory
    # that doesn't have write permissions.  Then what?
    os.utime(fname, (mtime, mtime))


if __name__ == '__main__':
    walk_dirtree('.')
