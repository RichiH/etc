#!/usr/bin/env python

# Wordpress Upload Script, etc.
from xdg import BaseDirectory
import ConfigParser
import sys
import os.path
sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)), "lib"))

import wordpresslib

config = ConfigParser.SafeConfigParser()
VERBOSE = False

for dir in BaseDirectory.load_config_paths('etc-extended'):
    filename = os.path.join(dir, 'wordpressrc')
    if not os.path.exists(filename): continue
    print "loading config from", filename
    with file(filename) as f:
        config.readfp(f)
    print 'config loaded'

DEFAULT_WORDPRESS_URL = 'http://wordpress.example.com/wordpress/xmlrpc.php'

if not config.has_section('account'):
    config.add_section('account')
    # Fill in some default values
    config.set('account', 'url', DEFAULT_WORDPRESS_URL)
    config.set('account', 'username', 'joe_user')
    config.set('account', 'password', 'trustNo1')

    path = os.path.join(BaseDirectory.save_config_path('etc-extended'), 'wordpressrc')
    print 'Need configuration! Edit %s'%(path,)
    with file(path, 'wb') as fp:
        config.write(fp)
    sys.exit()

if config.get('account', 'url') == DEFAULT_WORDPRESS_URL:
    # Don't wipe out what they might have configured
    print 'Still needs configuration! Edit %s'%(path,)

url = config.get('account', 'url')
username = config.get('account', 'username')
password = config.get('account', 'password')
if config.has_option('account', 'verbose'):
    VERBOSE = config.get('account', 'verbose')

print "Connecting to WP server at", url

wp = wordpresslib.WordPressClient(url, username, password)

if not config.has_option('account', 'blog_id') or config.get('account', 'blog_id') == '':
    blogs = list(wp.get_users_blogs())
    blog = blogs[0]
    print "Arbitrarily picking first blog: %s at %s"%(blog.name, blog.url)
    wp.selectBlog(blog.id)
else:
    blog_id = config.get_int('account', 'blog_id')
    print "Using blog id %s from config" % (blog_id,)
    wp.selectBlog(blog_id)

if VERBOSE:
    options = wp.get_options()
    print "Talking to %s version %s"%(options['software_name'], options['software_version'])

print [meth for meth in wp.supportedMethods() if 'categor' in meth.lower()]

# Closed questions:
# - blogger.getPost vs. metaWeblog.getPost
#   - blogger API only allows a single "string" content, and parses the crap out of it, single category, etc.
# - xmlrpc_getpostcategory: regex-matches the body of the content to find categories, separated by commas. Not useful for us. That eliminates blogger.newPost and blogger.editPost, but not mw.newpost and mw.editpost.
# - passing categories: there are different APIs with different interfaces.
#   You should be able to pass an array of category names to newPost/editPost,
#   but mt.setPostCategories wants an array of ids and isPrimary
#   (isPrimary is ignored by WP)

#print wp._server, wp._server.system.listMethods(), wp.supportedMethods()
print wp._server.mt.getPostCategories(346, username, password)
#print wp._server.system.methodSignature('mt.getPostCategories')
#print list(wp.get_recent_posts())[0].__dict__
#post = wp.get_recent_posts().next()
print list(wp.get_recent_posts())[2].categories
print wp.get_categories()
#post.categories.extend([31, 3])
#wp.edit_post(post.id, post, False)

#wp.getPostCategories(post.id)
